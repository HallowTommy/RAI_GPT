import os
import logging
import requests
import re
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from dotenv import load_dotenv

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
SOLSCAN_API_KEY = os.getenv("SOLSCAN_API_KEY")

if not OPENAI_API_KEY:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω API-–∫–ª—é—á OpenAI!")
if not SOLSCAN_API_KEY:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω API-–∫–ª—é—á Solscan!")

# FastAPI —Å–µ—Ä–≤–µ—Ä
app = FastAPI()

# –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class RequestBody(BaseModel):
    user_query: str

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ Solana CA
SOLANA_CA_PATTERN = r"\b[1-9A-HJ-NP-Za-km-z]{32,44}\b"

def get_token_info(ca):
    """ –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ """
    logger.info(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ: {ca}")
    url = f"https://pro-api.solscan.io/v2.0/token/meta?address={ca}"
    headers = {"accept": "application/json", "Content-Type": "application/json", "token": SOLSCAN_API_KEY}

    try:
        response = requests.get(url, headers=headers)
        if response.status_code != 200:
            return {"error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Solscan API."}

        data = response.json().get("data", {})
        return {
            "token_name": data.get("name", "Unknown"),
            "token_symbol": data.get("symbol", "Unknown"),
            "icon_url": data.get("icon", ""),
            "total_supply": data.get("supply", "Unknown"),
            "holders_count": data.get("holder", 0),
            "creator": data.get("creator", "Unknown"),
            "market_cap": data.get("market_cap", "Unknown"),
            "description": data.get("metadata", {}).get("description", ""),
            "website": data.get("metadata", {}).get("website", ""),
            "twitter": data.get("metadata", {}).get("twitter", ""),
        }

    except requests.RequestException as e:
        return {"error": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Solscan API: {e}"}

def get_token_first_transfers(ca):
    """ –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—ã–µ 10 —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç–æ–∫–µ–Ω–∞ """
    logger.info(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {ca}")
    url = f"https://pro-api.solscan.io/v2.0/token/transfer?address={ca}&activity_type[]=ACTIVITY_SPL_TRANSFER&page=1&page_size=10&sort_by=block_time&sort_order=asc"
    headers = {"accept": "application/json", "Content-Type": "application/json", "token": SOLSCAN_API_KEY}

    try:
        response = requests.get(url, headers=headers)
        if response.status_code != 200:
            return {"error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Solscan API."}

        data = response.json().get("data", [])
        return [
            {"tx_id": tx["trans_id"], "time": tx["time"], "from": tx["from_address"], "to": tx["to_address"], "amount": tx["amount"], "value": tx["value"]}
            for tx in data
        ]

    except requests.RequestException as e:
        return {"error": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Solscan API: {e}"}

def get_wallet_tokens(wallet_address, target_ca):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –∫–æ—à–µ–ª—å–∫–∞ –¥—Ä—É–≥–∏–µ —Ç–æ–∫–µ–Ω—ã, –∫—Ä–æ–º–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–≥–æ """
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ: {wallet_address}")
    url = f"https://pro-api.solscan.io/v2.0/account/tokens?address={wallet_address}"
    headers = {"accept": "application/json", "Content-Type": "application/json", "token": SOLSCAN_API_KEY}

    try:
        response = requests.get(url, headers=headers)
        if response.status_code != 200:
            return {"error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Solscan API."}

        data = response.json().get("data", [])
        has_other_tokens = any(token["tokenAddress"] != target_ca for token in data)
        return {"only_target_token": not has_other_tokens}

    except requests.RequestException as e:
        return {"error": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Solscan API: {e}"}

def get_wallet_transactions(wallet_address, target_ca, first_holders):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ª–∏ –∫–æ—à–µ–ª–µ–∫ —Ç–æ–∫–µ–Ω—ã –∫–æ–º—É-—Ç–æ –∏–∑ –ø–µ—Ä–≤—ã—Ö 10 —Ö–æ–ª–¥–µ—Ä–æ–≤ """
    logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã {wallet_address}")
    url = f"https://pro-api.solscan.io/v2.0/account/transactions?address={wallet_address}&limit=100"
    headers = {"accept": "application/json", "Content-Type": "application/json", "token": SOLSCAN_API_KEY}

    try:
        response = requests.get(url, headers=headers)
        if response.status_code != 200:
            return {"error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Solscan API."}

        data = response.json().get("data", [])
        insider_transfers = [tx for tx in data if tx["to"] in first_holders and tx["tokenAddress"] == target_ca]
        return {"insider_activity": len(insider_transfers) > 0, "transactions": insider_transfers}

    except requests.RequestException as e:
        return {"error": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Solscan API: {e}"}

@app.post("/analyze")
async def analyze_or_chat(body: RequestBody):
    """ –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–≤—É—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: –æ–±—ã—á–Ω—ã–π —á–∞—Ç –∏ –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞ """
    user_query = body.user_query.strip()
    match = re.search(SOLANA_CA_PATTERN, user_query)

    if match:
        ca = match.group(0)
        logger.info(f"üìç –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å: {ca}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
        token_info = get_token_info(ca)
        if "error" in token_info:
            return token_info

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        first_transfers = get_token_first_transfers(ca)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å–∞ –ø–µ—Ä–≤—ã—Ö 10 –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        first_holders = [tx["to"] for tx in first_transfers if tx["to"]]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–µ—Ä–≤—ã—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤ –¥—Ä—É–≥–∏–µ —Ç–æ–∫–µ–Ω—ã
        holder_analysis = {wallet: get_wallet_tokens(wallet, ca) for wallet in first_holders}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Å–∞–π–¥–µ—Ä—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –º–µ–∂–¥—É –ø–µ—Ä–≤—ã–º–∏ 10 —Ö–æ–ª–¥–µ—Ä–∞–º–∏
        insider_analysis = {wallet: get_wallet_transactions(wallet, ca, first_holders) for wallet in first_holders}

        return {
            "contract_address": ca,
            "token_info": token_info,
            "first_transfers": first_transfers,
            "holders_token_analysis": holder_analysis,
            "insider_transactions": insider_analysis
        }

    else:
        return {"response": "‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π CA —Ç–æ–∫–µ–Ω–∞."}

@app.get("/")
async def root():
    return {"message": "RAI AI Chat & Token Analysis API. Use /analyze to interact with AI or analyze tokens by CA."}
