import os
import logging
import requests
import re
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from dotenv import load_dotenv

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
SOLSCAN_API_KEY = os.getenv("SOLSCAN_API_KEY")

if not OPENAI_API_KEY:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω API-–∫–ª—é—á OpenAI!")
if not SOLSCAN_API_KEY:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω API-–∫–ª—é—á Solscan!")

# FastAPI —Å–µ—Ä–≤–µ—Ä
app = FastAPI()

# –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class RequestBody(BaseModel):
    user_query: str

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ Solana CA
SOLANA_CA_PATTERN = r"\b[1-9A-HJ-NP-Za-km-z]{32,44}\b"

def get_token_info(ca):
    """ –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ """
    logger.info(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ: {ca}")

    url = f"https://pro-api.solscan.io/v2.0/token/meta?address={ca}"
    headers = {"accept": "application/json", "Content-Type": "application/json", "token": SOLSCAN_API_KEY}

    try:
        response = requests.get(url, headers=headers)
        logger.info(f"üîÑ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ (meta): {response.status_code}")
        
        if response.status_code == 200:
            data = response.json().get("data", {})
            if data:
                return {
                    "token_name": data.get("name", "Unknown"),
                    "total_supply": int(data.get("supply", 0)),
                }
        return {"error": "‚ö†Ô∏è –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ."}
    except requests.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Solscan API: {e}")
        return {"error": "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Solscan API."}

def get_token_first_transfers(ca, total_supply):
    """ –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—ã–µ 20 —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç–æ–∫–µ–Ω–∞ –∏ —Å—á–∏—Ç–∞–µ—Ç % –∑–∞–∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Å—É–ø–ª–∞—è """
    logger.info(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–±–µ–∑ –º–∏–Ω—Ç–∞) –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {ca}")

    url = (
        f"https://pro-api.solscan.io/v2.0/token/transfer?"
        f"address={ca}"
        f"&activity_type[]=ACTIVITY_SPL_TRANSFER"
        f"&page=1&page_size=20&sort_by=block_time&sort_order=asc"
    )

    headers = {"accept": "application/json", "Content-Type": "application/json", "token": SOLSCAN_API_KEY}

    try:
        response = requests.get(url, headers=headers)
        logger.info(f"üîÑ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ Solscan: {response.status_code}")

        if response.status_code != 200:
            return {"error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Solscan API."}

        data = response.json().get("data", [])
        if not data:
            return {"error": "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö."}
        
        # –ü–æ–¥—Å—á–µ—Ç –∑–∞–∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Å—É–ø–ª–∞—è
        total_bought = sum(tx.get("amount", 0) for tx in data)
        supply_percentage = round((total_bought / total_supply) * 100, 4) if total_supply else 0
        
        logger.info(f"‚úÖ –ó–∞–∫—É–ø–ª–µ–Ω–æ {supply_percentage}% –æ—Ç –æ–±—â–µ–≥–æ —Å—É–ø–ª–∞—è –∑–∞ –ø–µ—Ä–≤—ã–µ 20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        return {"supply_bought_percent": supply_percentage}
    
    except requests.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Solscan API: {e}")
        return {"error": "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Solscan API."}

@app.post("/analyze")
async def analyze_or_chat(body: RequestBody):
    """ –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–≤—É—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: –æ–±—ã—á–Ω—ã–π —á–∞—Ç –∏ –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞ """
    user_query = body.user_query.strip()
    logger.info("üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: %s", user_query)

    match = re.search(SOLANA_CA_PATTERN, user_query)
    if match:
        ca = match.group(0)
        logger.info(f"üìç –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å: {ca}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
        token_info = get_token_info(ca)
        if "error" in token_info:
            return token_info

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Å—É–ø–ª–∞—è
        supply_bought = get_token_first_transfers(ca, token_info["total_supply"])

        return {
            "contract_address": ca,
            "token_info": token_info,
            "supply_bought": supply_bought,
        }
    else:
        return {"response": "‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π CA —Ç–æ–∫–µ–Ω–∞."}

@app.get("/")
async def root():
    return {"message": "RAI AI Chat & Token Analysis API. Use /analyze to interact with AI or analyze tokens by CA."}
